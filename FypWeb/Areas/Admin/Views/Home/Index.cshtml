
<div class="p-4 ml-[12rem]">
    @*     <div class="flex justify-center space-x-4 mb-4">
    <button id="today" class="px-4 py-2 bg-blue-500 text-white rounded-md">Today</button>
    <button id="week" class="px-4 py-2 bg-blue-500 text-white rounded-md">Week</button>
    <button id="month" class="px-4 py-2 bg-blue-500 text-white rounded-md">Month</button>
    <button id="year" class="px-4 py-2 bg-blue-500 text-white rounded-md">Year</button>
    </div> *@

    <div class=" outerlayer flex-col">
        <div class=" grid grid-cols-3 gap-4 h-[3.5rem] flex items-center ">
            <div class="border border-green-500 bg-[#D1E7DD] h-full flex items-center justify-between px-4 rounded-md ">
                <div class="flex-col">
                    <div class="font-semibold ">
                        Total Products
                    </div>
                    <div>@ViewBag.ProductsCount</div>
                </div>
                <i class='bx bx-shopping-bag text-[#198754]' style=' font-size: 24px; '></i>
            </div>
            <div class="border border-red-500 bg-[#F8D7DA]  h-full flex items-center justify-between px-4 rounded-md ">
                <div class="flex-col">
                    <div class="font-semibold">
                        Total Catetgories
                    </div>
                    <div>@ViewBag.CategoriesCount</div>
                </div>
                <i class='bx bx-category text-[#DC3545]' style='font-size: 24px;'></i>
            </div>
            <div class="border border-yellow-500 bg-[#FFF3CD] h-full flex items-center justify-between px-4 rounded-md ">
                <div class="flex-col">
                    <div class="font-semibold">
                        Total Brands
                    </div>
                    <div>@ViewBag.BrandsCount</div>
                </div>
                <i class='bx bx-purchase-tag text-[#FFC107]' style=' font-size: 24px;'></i>
            </div>
        </div>
        <div class="flex flex-wrap justify-center bg-white p-1  border rounded-md mt-2 ">
            <button id="week" class="text-black py-2 px-4 text-sm font-semibold rounded-t-lg hover:text-purple-600 hover:border-purple-600 border-b-2 border-transparent">Week</button>
            <button id="month" class="text-black py-2 px-4 text-sm font-semibold rounded-t-lg hover:text-purple-600 hover:border-purple-600 border-b-2 border-transparent">Month</button>
            <button id="year" class="text-black py-2 px-4 text-sm font-semibold rounded-t-lg hover:text-purple-600 hover:border-purple-600 border-b-2 border-transparent">Year</button>
        </div>
        <div class="px-2 mt-2">
            <canvas id="myChart" width="250" height="100"></canvas>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    </div>
</div>
@section Scripts{
    <script>
        var myChart = null;
        var ctx = null;

        document.addEventListener('DOMContentLoaded', function () {
            ctx = document.getElementById('myChart');
            loadChart('week');
            document.getElementById('week').addEventListener('click', function () { loadChart('week'); });
            document.getElementById('month').addEventListener('click', function () { loadChart('month'); });
            document.getElementById('year').addEventListener('click', function () { loadChart('year'); });
        });
        function loadChart(timeFrame) {
            // If the chart already exists, destroy it to start fresh
            if (myChart !== null) {
                myChart.destroy();
            }
            // Setting static labels for the days of the week
            var staticLabels = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

            // Placeholder for initial chart data
            var initialData = {
                labels: staticLabels, // Initialize with empty labels
                datasets: [{
                    label: 'Shopping Status',
                    backgroundColor: '#D1E7DD',
                    borderColor: '#198754',
                    data: [], // Initialize with empty data
                }]
            };

            // Chart configuration
            const config = {
                type: 'line',
                data: initialData,
                options: {
                    responsive: true,
                    plugins: {
                        subtitle: {
                            display: true,
                            text: 'Shopping Status',
                            font: {
                                size: 16,
                            },
                            padding: {
                                bottom: 5,
                            }
                        },
                        legend: {
                            position: 'bottom',
                        },
                    }
                },
            };

            // Create a new chart instance with the initial data
            ctx = document.getElementById('myChart');
            myChart = new Chart(ctx, config);

            // Load new data for the chart
            generateChartData(timeFrame);
        }

        function generateChartData(timeFrame) {
            if (timeFrame === 'week') {
                fetch('/Admin/Home/GetWeeklyShoppingStatus')
                    .then(response => response.json())
                    .then(data => {
                        // Initialize an array to hold sales data for each day, defaulting to 0
                        const salesDataForWeek = []; // Sunday to Saturday

                        // Map each dayOfWeek to an index (assuming your dayOfWeek is a string like "Sunday")
                        const dayOfWeekToIndex = {
                            "Sunday": 0,
                            "Monday": 1,
                            "Tuesday": 2,
                            "Wednesday": 3,
                            "Thursday": 4,
                            "Friday": 5,
                            "Saturday": 6
                        };

                        // Populate salesDataForWeek based on fetched data
                        data.forEach(item => {
                            const dayIndex = dayOfWeekToIndex[item.dayOfWeek];
                            if (dayIndex !== undefined) { // Check if the dayOfWeek from data is valid
                                salesDataForWeek[dayIndex] = item.totalSales;
                            }
                        });

                        if (myChart) {
                            // Since labels are static and already set, just update the data
                            myChart.data.datasets[0].data = salesDataForWeek;
                            myChart.data.datasets[0].label = 'Total Sales';
                            myChart.update();
                        }
                    })
                    .catch(error => console.error('Error fetching weekly data:', error));
            }
        }

    </script>
}
